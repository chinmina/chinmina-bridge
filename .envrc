#!/bin/sh

# By default, configure as a dev environment. This ensures logs are written in a
# text format rather than JSON.
export ENV=development

# add your own .envrc.private file to set required configuration or override any
# of the defaults without affecting your working copy
source_env_if_exists .envrc.private



#
# IMPORTANT
#
# Copy and declare the following variables in a separate file called .envrc.private:
# don't commit your local configuration to this file!
#
# IMPORTANT
#



#
# Server configuration
#

# export SERVER_PORT="8080"
# export SERVER_SHUTDOWN_TIMEOUT_SECS="25"

# Change the behaviour of the HTTP client for outgoing connections. Only change
# if server telemetry suggests it is necessary.
# export SERVER_OUTGOING_MAX_IDLE_CONNS="100"
# export SERVER_OUTGOING_MAX_CONNS_PER_HOST="20"

#
# Open Telemetry configuration
#

# set to true to enable OTel tracing and metrics
# export OBSERVE_ENABLED="false"

# Allows metrics to be disabled. This is useful when metrics collection is not
# available, as is the case when testing locally with Jaeger. Only effective
# when OBSERVE_ENABLED is true.
# export OBSERVE_METRICS_ENABLED="true"

# may be "grpc" or "stdout"
# export OBSERVE_TYPE="grpc"

# Configure internal Open Telemetry SDK logging. Levels are "debug", "info",
# "warn" or "" (disabled). Defaults to disabled; any incorrect value will also
# be interpreted as disabled.
# export OBSERVE_OTEL_LOG_LEVEL=""

# the service name reported in traces and metrics
# export OBSERVE_SERVICE_NAME="chinmina-bridge"

# the number of seconds to wait for a batch of spans before sending to the collector
# export OBSERVE_TRACE_BATCH_TIMEOUT_SECS="5"

# the number of seconds to wait between metric read and send attempts. A shorter
# interval may be desirable in testing, or when higher precision is required.
# export OBSERVE_METRIC_READ_INTERVAL_SECS="60"


# If OBSERVE_ENABLED is also true, enable sub-traces for all outgoing HTTP
# requests. This allows tracing of Builkite and GitHub API traffic. This is very
# useful, but for some providers who charge by the number of spans, this may be
# a costly operation.
# export OBSERVE_HTTP_TRANSPORT_ENABLED="true"

# When true, outgoing HTTP requests will be annotated with details of the
# connection process, e.g. DNS lookup time. Only effective when HTTP transport
# tracing is enabled.
# export OBSERVE_CONNECTION_TRACE_ENABLED="true"

# Standard OTel configuration is supported. See
# https://opentelemetry.io/docs/specs/otel/protocol/exporter/ for all
# configuration variables available.

# The endpoint to which traces and metrics will be sent.
#export OTEL_EXPORTER_OTLP_ENDPOINT==http://localhost:4317

#
# Buildkite OIDC configuration
#

# required
# export JWT_BUILDKITE_ORGANIZATION_SLUG="<your test organization slug>"

# The following JWT settings are generally development only. In production, it's
# expected that the default behaviour of retrieving the jwks.json directly from
# Buildkite will be the preferred method.

# use "make keygen" to generate a new key pair for testing
# jwks="$(cat .development/keys/jwk-sig-testing-pub.json)"
# export JWT_JWKS_STATIC="${jwks}"
# export JWT_ISSUER_URL="https://local.testing"
# export JWT_AUDIENCE="test-audience"

#
# Buildkite API connectivity
#

# required
# export BUILDKITE_API_TOKEN="<your buildkite token for local testing>"
# export BUILDKITE_AGENT_TAGS="<buildkite tag keypairs"

#
# GitHub API connectivity
#

# required (one of)
# export GITHUB_APP_PRIVATE_KEY="<app private key pem>"
# export GITHUB_APP_PRIVATE_KEY_ARN="<AWS KMS alias arn>"

# required
# export GITHUB_APP_ID="<id of app>"
# required
# export GITHUB_APP_INSTALLATION_ID="<id of installation of app for user/organization>"

# optionally, if you intend to use organisation profiles
# export GITHUB_ORG_PROFILE="<URL TO ORGANISATION PROFILE>"


#
# local OIDC utility
#

# JWT creation tool
# export UTIL_AUDIENCE="test-audience"
# export UTIL_SUBJECT="test-subject"
# export UTIL_ISSUER="https://local.testing"
# export UTIL_BUILDKITE_ORGANIZATION_SLUG="<your test organization slug>"
# export UTIL_BUILDKITE_PIPELINE_SLUG="<the pipeline to generate the JWT for>"

#
# Git diagnostics
#

# useful git variables for understanding if the credential helper is working
# export GIT_TRACE=2
# export GIT_CURL_VERBOSE=1
# export GIT_TRACE_PACKET=1
