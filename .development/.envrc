#!/bin/bash

# This configuration allows for local testing of the bridge. It uses Git config
# environment variables to override local configuration without making changes
# to it. See https://git-scm.com/docs/git-config#ENVIRONMENT

git_config_add() {
    local key="$1"
    local value="$2"

    index=$(( "${GIT_CONFIG_COUNT:-0}" - 1 ))

    # index is incremented each time a setting is added
    index=$(( index + 1 ))
    export GIT_CONFIG_COUNT=$(( index + 1 ))
    export "GIT_CONFIG_KEY_${index}=${key}"
    export "GIT_CONFIG_VALUE_${index}=${value}"
}

helper_path="$(expand_path ../helper)"

# Use the empty string to override helpers from other configuration
# See https://git-scm.com/docs/gitcredentials/2.29.0#Documentation/gitcredentials.txt-helper
git_config_add "credential.helper" ""
git_config_add "credential.https://github.com.helper" ""

# Now configure the testing helper from the this repo. This uses the local JWT
# keys to create an OIDC token that mimics Buildkite's, but doesn't require a
# Buildkite agent. It only works if the server is run with the corresponding
# test keys; see the root .envrc for that information.
git_config_add "credential.https://github.com.helper" "${helper_path}/buildkite-connector-credential-helper http://localhost:${SERVER_PORT:-8080}/git-credentials"
git_config_add "credential.https://github.com.usehttppath" "true"

source_up

# add your own .envrc.private file to set required configuration or override any
# of the defaults without affecting your working copy
source_env_if_exists ".envrc.private"


############# example .envrc.private #################

#
# Git diagnostics
#
# Useful git variables for understanding if the credential helper is working.
#

# trace will show the credential commands that are executed
# export GIT_TRACE=2

# like curl -v, but for git
# export GIT_CURL_VERBOSE=1

# unsure about the value of this one
# export GIT_TRACE_PACKET=1

